{
    "profile_id": "asiea-alrefai-5172341a5",
    "first_name": "Asiea",
    "last_name": "Alrefai",
    "sub_title": "Graduate Computer Science Student at Vrije Amsterdam University",
    "profile_picture": "https://media.licdn.com/dms/image/C4E03AQG7VddewCowyA/profile-displayphoto-shrink_800_800/0/1599868785966?e=1701302400&v=beta&t=Vdjs6ofrKBP3HhaafD2CO2R3E61Q0B4uxEvyV8_C7ug",
    "background_image": "https://media.licdn.com/dms/image/C4E16AQFvBe7nYQGdlA/profile-displaybackgroundimage-shrink_350_1400/0/1594302701254?e=1701302400&v=beta&t=7ugts15KENqzYGvZalOHFyNLtP4oi3PVEOKbeUOukcQ",
    "profile_type": "personal",
    "entity_urn": "ACoAAC_o-OMBGO-9oSUqu8wxPEeTHhdPm2DZpIQ",
    "object_urn": 803797219,
    "birth_date": null,
    "summary": "I live in the Netherlands, and since I was a child I had a passion for computers and technology. I am a full-time student at Vrije Amsterdam Univerity Faculty Computer Science. I love always developing, learning and keep my knowledge up to date, so I am looking for internships in App and Software development as well as any Research or Development Project. \nYou can contact me directly at asieaalrefai334@gmail.com.",
    "location": {
        "country": "Germany",
        "short": "Bottrop, North Rhine-Westphalia",
        "city": "Bottrop",
        "state": "North Rhine-Westphalia",
        "default": "Bottrop, North Rhine-Westphalia, Germany"
    },
    "premium": false,
    "influencer": false,
    "treasury_media": [],
    "languages": {
        "primary_locale": {
            "country": "US",
            "language": "en"
        },
        "supported_locales": [
            {
                "country": "US",
                "language": "en"
            }
        ],
        "profile_languages": [
            {
                "name": "Arabic",
                "proficiency": "NATIVE_OR_BILINGUAL"
            },
            {
                "name": "Dutch",
                "proficiency": "PROFESSIONAL_WORKING"
            },
            {
                "name": "English",
                "proficiency": "FULL_PROFESSIONAL"
            },
            {
                "name": "Turkish",
                "proficiency": "ELEMENTARY"
            }
        ]
    },
    "industry": "Higher Education",
    "education": [
        {
            "date": {
                "start": {
                    "month": null,
                    "day": null,
                    "year": 2019
                },
                "end": {
                    "month": null,
                    "day": null,
                    "year": 2022
                }
            },
            "school": {
                "name": "Vrije Universiteit Amsterdam (VU Amsterdam)",
                "logo": "https://media.licdn.com/dms/image/D4E0BAQGFG964atm3Ow/company-logo_400_400/0/1682661887840?e=1703721600&v=beta&t=871s4br2EokXU4GPzYVwsoy3BpQAoKkgU-c2zYvtGmQ",
                "url": "https://www.linkedin.com/school/vrije-universiteit-amsterdam/"
            },
            "degree_name": "Bachelor's degree",
            "field_of_study": "Computer Science",
            "grade": null
        }
    ],
    "patents": [],
    "awards": [],
    "certifications": [],
    "organizations": [],
    "projects": [
        {
            "title": "Emulator capable of executing IJVMbyte-code",
            "date": {
                "start": {
                    "month": 6,
                    "day": null,
                    "year": 2020
                },
                "end": {
                    "month": null,
                    "day": null,
                    "year": null
                }
            },
            "description": "I will implement an emulator capable of executing IJVMbyte-code, implemented in C. \n\nTask 1: \nFirst I need to read a filename from the command line arguments, then read that file into a byte array, and extract the relevant IJVMheaders from it. Finally, starting at the first instruction, print the names (e.g. POP) of the instructions in the binary to the standard output. \n\nTask 2:\nImplement the stack memory, and the common operations on the stack, as well as Implement the basic IJVM stack manipulation instructions, such as asIADD,ISUB,IAND,IOR, and push. Finally, read a simply provided binary, execute the instructions, and print the whole contents of the stack (in hexadecimal) to the standard output. Also, implement the IN and OUT instructions\n\nTask 3:\nWrite a function to convert a byte array to an integer so that you can read instruction operands. Then Implement the GOTO instruction.  Finally, implement the other control flow instructions.\n\nTask 4:\nImplement the constant pool (LDC_Winstruction). 2) Implement local variables (ILOAD and ISTOREinstructions), the IINC instruction. Finally, implement the WIDE instruction.\n\nTask 5:\nImplement the INVOKEVIRTUAL and IRETURN. ",
            "contributors": [
                {
                    "type": "standardizedContributor",
                    "first_name": "Asiea",
                    "last_name": "Alrefai",
                    "name": null,
                    "headline": "Graduate Computer Science Student at Vrije Amsterdam University"
                }
            ]
        },
        {
            "title": "Botnet Reverse-Engineering",
            "date": {
                "start": {
                    "month": 2,
                    "day": null,
                    "year": 2020
                },
                "end": {
                    "month": 3,
                    "day": null,
                    "year": 2020
                }
            },
            "description": "A botnet is a network of malware-infected computers. The malware makes the computer respond to remote commands sent by an attacker. This attacker could, for example, instruct these computers to all at once request a resource-intensive service from a single provider, executing a Distributed Denial of Service Attack (DDoS). Our task to reverse engineer the protocol this executable uses to communicate with the botnet control serve and capture its traffic while it is connected to the server. Then analyze the captured traffic to figure out how the botnet protocol works. To capture the traffic we used Wireshark.\n\nThis is a common task for real-world malware analysts.",
            "contributors": [
                {
                    "type": "standardizedContributor",
                    "first_name": "Asiea",
                    "last_name": "Alrefai",
                    "name": null,
                    "headline": "Graduate Computer Science Student at Vrije Amsterdam University"
                },
                {
                    "type": "standardizedContributor",
                    "first_name": "Safaa",
                    "last_name": "Kadah Salim",
                    "name": null,
                    "headline": "Computer Science student at Vrije Universiteit Amsterdam"
                }
            ]
        },
        {
            "title": "Chat Client and Server ",
            "date": {
                "start": {
                    "month": 2,
                    "day": null,
                    "year": 2020
                },
                "end": {
                    "month": 3,
                    "day": null,
                    "year": 2020
                }
            },
            "description": "We implemented a text-based chat client. For this, we used Python, sockets, and the TransmissionControl Protocol (TCP). It also handles the errors, For example, once a connection is established, TCP provides a stream of bytes in the order they were sent and without errors. The Transport Control Protocol (TCP) runs on the hosts and hides the unreliability of the network and underlying protocol. To solve this issue we used here UDP protocol instead of TCP. We also implement our own chat server using the same protocol. The server is likely to have multiple open connections at the same time\u2013one for each client that is connected to it. Because it is impossible to predict when a client will send a request or message, our server keeps checking all connections for incoming data. We used multi-threading as solutions to this problem.",
            "contributors": [
                {
                    "type": "standardizedContributor",
                    "first_name": "Asiea",
                    "last_name": "Alrefai",
                    "name": null,
                    "headline": "Graduate Computer Science Student at Vrije Amsterdam University"
                },
                {
                    "type": "standardizedContributor",
                    "first_name": "Safaa",
                    "last_name": "Kadah Salim",
                    "name": null,
                    "headline": "Computer Science student at Vrije Universiteit Amsterdam"
                }
            ]
        },
        {
            "title": "Web Development ",
            "date": {
                "start": {
                    "month": 1,
                    "day": null,
                    "year": 2020
                },
                "end": {
                    "month": 1,
                    "day": null,
                    "year": 2020
                }
            },
            "description": "I have created a home page of a fictitious smartphone webshop. The web contains a dynamic table in JavaScript that displays the top 5 products in the shop. This website runs on my own web service that I created. The web service provides web client with the following functionality:\nto retrieve the full data set (all rows currently stored in your local product inventory database)in the JSON style.\nIn addition, it provides the so-called minimal CRUD (Create, Retrieve, Update and Delete) interface on single rows. That is, it should be possible:\nto add data for a new product item (Create),\nto list the data of a specific item (Retrieve),\nto change data of a specific item (Update), and\nto remove data of a specific item (Delete)\n\nThe website is also responsive.\n\n",
            "contributors": [
                {
                    "type": "standardizedContributor",
                    "first_name": "Asiea",
                    "last_name": "Alrefai",
                    "name": null,
                    "headline": "Graduate Computer Science Student at Vrije Amsterdam University"
                }
            ]
        },
        {
            "title": "Third-Eye Robot in Matlab",
            "date": {
                "start": {
                    "month": 11,
                    "day": null,
                    "year": 2019
                },
                "end": {
                    "month": 12,
                    "day": null,
                    "year": 2019
                }
            },
            "description": "The main use of the Third-Eye Robot is to help short-sighted people to find objects that they are unable to find eg keys and glasses. The user will ask the robot to search for an item, then the robot will record command and analyze it using sound processing. To recognize the command, we took samples of records of both words, plotted the MFCC, saved the returned matrix and kept it, in order to compare them with the commands, then we made a rule-based classifier. After that, the robot will start moving and take pictures in every certain amount of time. Using images classification (Euler number properties and form factor) the robot will process whether the image contains glasses or keys or something else.  ",
            "contributors": [
                {
                    "type": "standardizedContributor",
                    "first_name": "Asiea",
                    "last_name": "Alrefai",
                    "name": null,
                    "headline": "Graduate Computer Science Student at Vrije Amsterdam University"
                },
                {
                    "type": "nonStandardizedContributor",
                    "first_name": null,
                    "last_name": null,
                    "name": "Souriana Shakour",
                    "headline": null
                },
                {
                    "type": "standardizedContributor",
                    "first_name": "Safaa",
                    "last_name": "Kadah Salim",
                    "name": null,
                    "headline": "Computer Science student at Vrije Universiteit Amsterdam"
                }
            ]
        },
        {
            "title": "DIY Vector C++",
            "date": {
                "start": {
                    "month": 10,
                    "day": null,
                    "year": 2019
                },
                "end": {
                    "month": 10,
                    "day": null,
                    "year": 2019
                }
            },
            "description": "I have implemented my own vector class. The DiyVector will store items of type T in an array that is dynamically allocated on the heap, using new[]. \n\nI only expand this array, but never shrink it:\n\nwhen adding an item (using pushBack or insert), if there is no currently unused element in the array, create a new array, able to hold one more element, and copy over the old items. Of course, I delete[] the old, too-short array afterward.\n\nwhen deleting an item (using popBack or erase), I simply \"pack\" the array by copying all items behind the erased one to close the gap (and adjust the bookkeeping of used elements). Later, when a new item is to be added (using pushBack or insert), I re-use an old space at the end of the array, instead of creating a whole new array.\n",
            "contributors": [
                {
                    "type": "standardizedContributor",
                    "first_name": "Asiea",
                    "last_name": "Alrefai",
                    "name": null,
                    "headline": "Graduate Computer Science Student at Vrije Amsterdam University"
                }
            ]
        },
        {
            "title": "Maze in C++",
            "date": {
                "start": {
                    "month": 9,
                    "day": null,
                    "year": 2019
                },
                "end": {
                    "month": 9,
                    "day": null,
                    "year": 2019
                }
            },
            "description": "The maze is made out of walls and a path. The starting point of the maze is marked by the coordinates of the player. Similarly, the exit is marked as a dedicated coordinate. The goal of this program is to report the player's moves in the maze. the input files have to be read, the maze shall be printed to the screen. Next, the list of player moves shall be executed. Finally, the maze shall be printed again, followed by a message whether or not the player has reached the exit. The program also handles the errors that may occur.",
            "contributors": [
                {
                    "type": "standardizedContributor",
                    "first_name": "Asiea",
                    "last_name": "Alrefai",
                    "name": null,
                    "headline": "Graduate Computer Science Student at Vrije Amsterdam University"
                }
            ]
        }
    ],
    "publications": [],
    "courses": [
        {
            "name": "A Broder Mind ",
            "number": null
        }
    ],
    "test_scores": [],
    "position_groups": [
        {
            "company": {
                "id": 5570,
                "name": "Vrije Universiteit Amsterdam (VU Amsterdam)",
                "logo": "https://media.licdn.com/dms/image/D4E0BAQGFG964atm3Ow/company-logo_400_400/0/1682661887840?e=1703721600&v=beta&t=871s4br2EokXU4GPzYVwsoy3BpQAoKkgU-c2zYvtGmQ",
                "url": "https://www.linkedin.com/school/vrije-universiteit-amsterdam/",
                "employees": {
                    "start": 5001,
                    "end": 10000
                }
            },
            "date": {
                "start": {
                    "month": 9,
                    "day": null,
                    "year": 2020
                },
                "end": {
                    "month": null,
                    "day": null,
                    "year": null
                }
            },
            "profile_positions": [
                {
                    "location": "Amsterdam, North Holland, Netherlands",
                    "date": {
                        "start": {
                            "month": 9,
                            "day": null,
                            "year": 2020
                        },
                        "end": {
                            "month": null,
                            "day": null,
                            "year": null
                        }
                    },
                    "company": "Vrije Universiteit Amsterdam (VU Amsterdam)",
                    "description": null,
                    "title": "Teaching Assistant",
                    "employment_type": "Part-time"
                }
            ]
        },
        {
            "company": {
                "id": 18991281,
                "name": "Edu4u",
                "logo": "https://media.licdn.com/dms/image/C560BAQF0A8vAImzTPg/company-logo_400_400/0/1575659708587?e=1703721600&v=beta&t=JZs6msgZWUoqc0AptFLUJm9pyt_Kq6I8huz8Iahq618",
                "url": "https://www.linkedin.com/company/education-for-you/",
                "employees": {
                    "start": 11,
                    "end": 50
                }
            },
            "date": {
                "start": {
                    "month": 9,
                    "day": null,
                    "year": 2020
                },
                "end": {
                    "month": null,
                    "day": null,
                    "year": null
                }
            },
            "profile_positions": [
                {
                    "location": "Amsterdam, North Holland, Netherlands",
                    "date": {
                        "start": {
                            "month": 9,
                            "day": null,
                            "year": 2020
                        },
                        "end": {
                            "month": null,
                            "day": null,
                            "year": null
                        }
                    },
                    "company": "Edu4u",
                    "description": "Teacher for Programming and Math",
                    "title": "Teacher",
                    "employment_type": "Part-time"
                }
            ]
        }
    ],
    "volunteer_experiences": [],
    "skills": [
        "C (Programming Language)",
        "Computer Science",
        "Web Development",
        "Research",
        "Research and Development (R&D)",
        "C++",
        "Python (Programming Language)",
        "MATLAB",
        "C",
        "Scala"
    ],
    "network_info": null,
    "related_profiles": null,
    "contact_info": null
}